@page "/"
@using ProtelAppT.Service
@inject AuthenticationStateService _authServiceState
@inject NavigationManager _navigationManager
@inject ProtelAppT.Data.ProtelDbContext _dbContext
@using ProtelAppT.Data
@using Microsoft.EntityFrameworkCore
@using MudBlazor.Charts
@using MudBlazor.Components
@using MudBlazor

@if (!_authServiceState.IsAuthenticated)
{
    _navigationManager.NavigateTo("/login");
}

<MudGrid Spacing="4">
    <MudItem xs="12" sm="6" md="4">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">Clientes Registrados</MudText>
                <MudText Typo="Typo.h4">@totalClientes.ToString()</MudText>
                <MudIcon Class="mt-2" Icon="@Icons.Material.Filled.People" Size="Size.Large" Color="Color.Primary" />
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">Estudios Activos</MudText>
                <MudText Typo="Typo.h4">@estudiosActivos</MudText>
                <MudIcon Class="mt-2" Icon="@Icons.Material.Filled.ListAlt" Size="Size.Large" Color="Color.Secondary" />
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="4">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">Estudios Totales</MudText>
                <MudText Typo="Typo.h4">@totalestudios</MudText>
                <MudIcon Class="mt-2" Icon="@Icons.Material.Filled.Map" Size="Size.Large" Color="Color.Success" />
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Estudios Recientes</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@estudiosRecientes" Hover="true" Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Cliente</MudTh>
                        <MudTh>Estado</MudTh>
                        <MudTh>Fecha</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nombre Proyecto">@context.NombreProyecto</MudTd>
                        <MudTd DataLabel="Cliente">@context.Cliente?.Nombre</MudTd>
                        <MudTd DataLabel="Estado">                            
                        </MudTd>
                        <MudTd DataLabel="Fecha Solicitud">@context.FechaSolicitud.ToString("dd/MM/yyyy")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
        </MudCard>
    </MudItem>    
    <MudItem xs="12" sm="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">Estudios Activos por tipos</MudText>
                <MudPaper Class="pa-4">
                    <MudChart ChartType="ChartType.Pie" InputData="@data" InputLabels="@labels" Width="300px" Height="300px" />
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </MudItem>

</MudGrid>

@code {
    private int totalClientes;
    private int estudiosActivos;
    private int totalestudios;
    private List<Factibilidad> estudiosRecientes; 
    double[] data = Array.Empty<double>();
    string[] labels = Array.Empty<string>();


    protected override async Task OnInitializedAsync()
    {

        var query = await _dbContext.FACTIBILIDAD.GroupBy(f => f.EstadoFactibilidad.Nombre)
            .Select(g => new { Estado = g.Key, Cantidad = g.Count() })
            .ToListAsync();

        labels = query.Select(x => x.Estado).ToArray();
        data = query.Select(x => (double)x.Cantidad).ToArray();


        // Obtener el total de clientes activos
        totalClientes = await _dbContext.CLIENTE.CountAsync(); 

        // Obtener el número de estudios activo
        var estadosActivos = new List<int> { 6, 7, 8, 9 };
        estudiosActivos = await _dbContext.FACTIBILIDAD
        .CountAsync(f => estadosActivos.Contains(f.IdEstadoFactibilidad));


        //total estudios
        totalestudios = await _dbContext.FACTIBILIDAD.CountAsync();

        // Obtener los estudios de factibilidad más recientes 
        estudiosRecientes = await _dbContext.FACTIBILIDAD
                                            .Include(f => f.Cliente) // Incluimos la información del cliente
                                            .Include(f => f.EstadoFactibilidad) // Incluimos el estado de factibilidad
                                            .OrderByDescending(f => f.FechaSolicitud)
                                            .Take(4) // Por ejemplo, obtener los 5 más recientes
                                            .ToListAsync();



        var estudiosPorEstado = await _dbContext.FACTIBILIDAD.GroupBy(f => f.EstadoFactibilidad.Nombre)
                                .Select(g => new{Estado = g.Key,Cantidad = g.Count()})
                                .ToListAsync();   
                               


    }

}
