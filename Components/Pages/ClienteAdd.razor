
@page "/cliente-add"
@using ProtelAppT.Data
@using Microsoft.EntityFrameworkCore
@inject ProtelAppT.Data.ProtelDbContext _dbContext
@inject NavigationManager Nav
@inject IDialogService DialogService
@using ProtelAppT.Service

<MudPaper Class="pa-4 mx-auto" MaxWidth="600px" Elevation="4">
    <MudText Typo="Typo.h5" Class="mb-4">Registrar Nuevo Cliente</MudText>

    <EditForm Model="@cliente" OnValidSubmit="GuardarCliente">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Nombre" @bind-Value="cliente.Nombre" Required="true" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField Label="Dirección" @bind-Value="cliente.Direccion" Required="true" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField Label="Teléfono" @bind-Value="cliente.Telefono" Required="true" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField Label="Email" @bind-Value="cliente.Email" Required="true" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudSelect T="int" Label="Estado del Cliente" @bind-Value="cliente.IdEstadoCliente" Required="true">
                    @foreach (var estado in estadosCliente)
                    {
                        <MudSelectItem Value="@estado.IdEstadoCliente">@estado.Nombre</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                <MudButton Type="Submit" Color="Color.Primary" Variant="Variant.Filled">Guardar</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudPaper>

@code {
    private Cliente cliente = new Cliente();
    private List<EstadoCliente> estadosCliente = new();

    protected override async Task OnInitializedAsync()
    {
        estadosCliente = await _dbContext.ESTADOCLIENTE.ToListAsync();
    }

    private async Task GuardarCliente()
    {
        Console.WriteLine("===> Entrando a GuardarCliente");
        try
        {
            var ultimoId = await _dbContext.CLIENTE
                .OrderByDescending(c => c.IdCliente)
                .Select(c => c.IdCliente)
                .FirstOrDefaultAsync();

            cliente.IdCliente = ultimoId + 1;
            cliente.FechaCreacion = DateTime.Now;
            cliente.FechaActualizacion = DateTime.Now;

            Console.WriteLine($"Último ID encontrado: {ultimoId}");

            Console.WriteLine($"Datos del cliente a guardar: {cliente.Nombre}, {cliente.Email}");


            _dbContext.CLIENTE.Add(cliente);
            await _dbContext.SaveChangesAsync();

            Nav.NavigateTo("/clientes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar: {ex.Message}");
            if (ex.InnerException != null)
                Console.WriteLine($"Inner: {ex.InnerException.Message}");

        }
    }
}
