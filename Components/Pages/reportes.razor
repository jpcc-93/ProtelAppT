@page "/reportes"
@using ProtelAppT.Service
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel
@using System.IO
@using ProtelAppT.Data
@using System.Net.Mail
@using System.Net
@inject IJSRuntime jsRuntime
@inject AuthenticationStateService _authServiceState
@inject NavigationManager _navigationManager
@inject ProtelAppT.Data.ProtelDbContext _dbContext
@inject ProtelAppT.Service.ReporteService word
@inject ISnackbar Snackbar



@if (!_authServiceState.IsAuthenticated)
{
    _navigationManager.NavigateTo("/login");
}

else if (_authServiceState.GetUserRole() != "Administrador")
{
    <MudPaper Class="d-flex justify-center align-center" Style="height: 100vh;">
        <MudText Color="Color.Error" Typo="Typo.h6" Class="text-center">
            No tienes permiso para ver esta página.
        </MudText>
    </MudPaper>
    return;
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GeneratePdf">PDF</MudButton>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GenerateExcel">Excel</MudButton>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GenerateWord">Word</MudButton>
                </MudCard>
            </MudItem>
        </MudGrid>

        <MudGrid Class="mt-6">
            <MudItem xs="12">
                <MudTextField @bind-Value="_emailDestino"
                              Label="Correo electrónico"
                              Variant="Variant.Outlined"
                              FullWidth="true" />
            </MudItem>
            <MudItem xs="12" Class="mt-2">
                <MudButton Color="Color.Success"
                           Variant="Variant.Filled"
                           OnClick="EnviarReportesPorCorreo"
                           FullWidth="true">
                    Enviar reportes por correo
                </MudButton>
            </MudItem>
        </MudGrid>

    </MudContainer>
}


@code{
    private string message { get; set; } = "";
    private string _emailDestino = string.Empty;



    private async Task GenerateExcel()
    {
        var bytes = await word.GenerarReporteExcelAsync();
        await jsRuntime.SaveAsFileAsync("Factibilidad.xlsx", bytes, "application/vnd.stream-excel");
    }




    private async Task GenerateWord()
    {
        var bytes = await word.GenerarReporteWordAsync();
        await jsRuntime.SaveAsFileAsync("reporte_factibilidades.docx", bytes, "application/vnd.openxmlformats-officedocument.wordprocessingml.document");            
    }




    private async Task GeneratePdf()
    {
        var bytes = await word.GenerarReportePdfAsync();
        await jsRuntime.SaveAsFileAsync("reporte_factibilidades.pdf", bytes, "application/pdf");
    }




    private async Task EnviarReportesPorCorreo()
    {
        try
        {
            using (MailMessage mail = new MailMessage())
            {
                // Configura el correo electrónico, hay 2 partes, aqui y en la linea 138 de este mismo componente
                mail.From = new MailAddress("Tu Email");
                mail.To.Add(_emailDestino);
                mail.Subject = "Reportes de Factibilidad";
                mail.Body = "Adjunto los reportes de factibilidad en formato PDF, Excel y Word.";
                mail.IsBodyHtml = true;

                var pdfStream = new MemoryStream(await word.GenerarReportePdfAsync());
                pdfStream.Position = 0;
                mail.Attachments.Add(new Attachment(pdfStream, "reporte_factibilidades.pdf", "application/pdf"));

                var wordStream = new MemoryStream(await word.GenerarReporteWordAsync());
                wordStream.Position = 0;
                mail.Attachments.Add(new Attachment(wordStream, "reporte_factibilidades.docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"));

                var excelStream = new MemoryStream(await word.GenerarReporteExcelAsync());
                excelStream.Position = 0;
                mail.Attachments.Add(new Attachment(excelStream, "Factibilidad.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"));



                using (SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587))
                {
                    smtp.Credentials = new NetworkCredential("Tucorreo", "Tu Contraseña");
                    //tiene que ser gmail
                    //la contraseña debe de ser el keyapp de la cuenta de gmail
                    smtp.EnableSsl = true;
                    await smtp.SendMailAsync(mail);
                    Snackbar.Add("Reportes enviados correctamente.", Severity.Success);

                }
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
            throw;
        }
    }

}