@page "/factibilidades"
@using ProtelAppT.Data
@using Microsoft.EntityFrameworkCore
@inject ProtelAppT.Data.ProtelDbContext _dbContext
@inject NavigationManager _navigationManager
@inject IDialogService DialogService
@inject AuthenticationStateService _authServiceState
@using ProtelAppT.Service
@inject ISnackbar Snackbar

@if (!_authServiceState.IsAuthenticated)
{
    _navigationManager.NavigateTo("/login");
}

<MudText Typo="Typo.h4" Class="mb-4" Align="Align.Center">Gestión de Factibilidades</MudText>


<MudTable Items="@factibilidades"
          @bind-SelectedItems="factibilidadesSeleccionadas"
          MultiSelection="true"
          Hover="true"
          Dense="true"
          Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Outlined" OnClick="CrearFactibilidad" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Nombre Proyecto</MudTh>
        <MudTh>Cliente</MudTh>
        <MudTh>Estado</MudTh>
        <MudTh>Fecha Solicitud</MudTh>        
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.IdFactibilidad</MudTd>
        <MudTd>@context.NombreProyecto</MudTd>
        <MudTd>@context.Cliente?.Nombre</MudTd>
        <MudTd>@context.EstadoFactibilidad?.Nombre</MudTd>
        <MudTd>@context.FechaSolicitud.ToString("dd/MM/yyyy")</MudTd>
        <MudTd></MudTd> 
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{5, 10, 20}" />
    </PagerContent>
</MudTable>


<div class="d-flex justify-end mt-4">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ModificarFactibilidadesSeleccionadas" Class="mr-2" Disabled="@(!factibilidadesSeleccionadas.Any())">Modificar</MudButton>
    <MudButton Color="Color.Error " Variant="Variant.Filled" OnClick="EliminarFactibilidadesSeleccionadas" Disabled="@(!factibilidadesSeleccionadas.Any())">Eliminar</MudButton> 
</div>


@code {
    private List<Factibilidad> factibilidades = new List<Factibilidad>();
    private HashSet<Factibilidad> factibilidadesSeleccionadas = new HashSet<Factibilidad>();

    protected override async Task OnInitializedAsync()
    {
        factibilidades = await _dbContext.FACTIBILIDAD
            .Include(f => f.Cliente)
            .Include(f => f.EstadoFactibilidad)
            .ToListAsync();
        
    }

    private void CrearFactibilidad()
    {
        _navigationManager.NavigateTo("/estudios-add"); 
    }

    private void ModificarFactibilidadesSeleccionadas()
    {
        if (factibilidadesSeleccionadas.Count == 1)
        {
            var id = factibilidadesSeleccionadas.First().IdFactibilidad;
            _navigationManager.NavigateTo($"/factibilidades-edit/{id}");
        }
        else if (factibilidadesSeleccionadas.Count > 1)
        {
            Snackbar.Add("Selecciona solo una factibilidad para editar.", Severity.Warning);
        }       
    }


    private async Task EliminarFactibilidadesSeleccionadas()
    {
        if (factibilidadesSeleccionadas.Any())
        {
            bool? result = await DialogService.ShowMessageBox(
                "Confirmar Eliminación",
                $"¿Seguro que quieres eliminar {factibilidadesSeleccionadas.Count} factibilidades?",
                yesText: "Eliminar",
                cancelText: "Cancelar");

            if (result == true)
            {
                _dbContext.FACTIBILIDAD.RemoveRange(factibilidadesSeleccionadas);
                await _dbContext.SaveChangesAsync();
                factibilidades.RemoveAll(f => factibilidadesSeleccionadas.Contains(f));
                factibilidadesSeleccionadas.Clear();
                StateHasChanged(); // Actualizar la UI
            }
        }
    }
}