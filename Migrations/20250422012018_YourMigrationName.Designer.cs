// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProtelAppT.Data;

#nullable disable

namespace ProtelAppT.Migrations
{
    [DbContext(typeof(ProtelDbContext))]
    [Migration("20250422012018_YourMigrationName")]
    partial class YourMigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProtelAppT.Data.AsignacionRolAutorizacion", b =>
                {
                    b.Property<int>("IdAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ASIGNACION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsignacion"));

                    b.Property<int>("IdAutorizacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_AUTORIZACION");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("ID_ROL");

                    b.HasKey("IdAsignacion");

                    b.HasIndex("IdAutorizacion");

                    b.HasIndex("IdRol");

                    b.ToTable("ASIGNACIONROLAUTORIZACION");
                });

            modelBuilder.Entity("ProtelAppT.Data.Autorizacion", b =>
                {
                    b.Property<int>("IdAutorizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_AUTORIZACION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAutorizacion"));

                    b.Property<string>("DescripcionAutorizacion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DESCRIPCION_AUTORIZACION");

                    b.Property<string>("NombreAutorizacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NOMBRE_AUTORIZACION");

                    b.HasKey("IdAutorizacion");

                    b.ToTable("AUTORIZACION");
                });

            modelBuilder.Entity("ProtelAppT.Data.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CLIENTE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DIRECCION");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FECHA_ACTUALIZACION");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FECHA_CREACION");

                    b.Property<int>("IdEstadoCliente")
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTADO_CLIENTE");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TELEFONO");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdEstadoCliente");

                    b.ToTable("CLIENTE");
                });

            modelBuilder.Entity("ProtelAppT.Data.EstadoCliente", b =>
                {
                    b.Property<int>("IdEstadoCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTADO_CLIENTE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoCliente"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("IdEstadoCliente");

                    b.ToTable("ESTADOCLIENTE");
                });

            modelBuilder.Entity("ProtelAppT.Data.EstadoFactibilidad", b =>
                {
                    b.Property<int>("IdEstadoFactibilidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTADO_FACTIBILIDAD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoFactibilidad"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("IdEstadoFactibilidad");

                    b.ToTable("ESTADOFACTIBILIDAD");
                });

            modelBuilder.Entity("ProtelAppT.Data.Factibilidad", b =>
                {
                    b.Property<int>("IdFactibilidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_FACTIBILIDAD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFactibilidad"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<DateTime?>("FechaRespuesta")
                        .HasColumnType("datetime2")
                        .HasColumnName("FECHA_RESPUESTA");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime2")
                        .HasColumnName("FECHA_SOLICITUD");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("ID_CLIENTE");

                    b.Property<int>("IdEstadoFactibilidad")
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTADO_FACTIBILIDAD");

                    b.Property<string>("NombreProyecto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOMBRE_PROYECTO");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UBICACION");

                    b.HasKey("IdFactibilidad");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdEstadoFactibilidad");

                    b.ToTable("FACTIBILIDAD");
                });

            modelBuilder.Entity("ProtelAppT.Data.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ROL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("IdRol");

                    b.ToTable("ROL");
                });

            modelBuilder.Entity("ProtelAppT.Data.Usuario", b =>
                {
                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CORREO");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("ID_ROL");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PASSWORD_HASH");

                    b.HasKey("Correo");

                    b.HasIndex("IdRol");

                    b.ToTable("USUARIO");
                });

            modelBuilder.Entity("ProtelAppT.Data.AsignacionRolAutorizacion", b =>
                {
                    b.HasOne("ProtelAppT.Data.Autorizacion", "Autorizacion")
                        .WithMany("AsignacionesRolAutorizacion")
                        .HasForeignKey("IdAutorizacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProtelAppT.Data.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autorizacion");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("ProtelAppT.Data.Cliente", b =>
                {
                    b.HasOne("ProtelAppT.Data.EstadoCliente", "EstadoCliente")
                        .WithMany("Clientes")
                        .HasForeignKey("IdEstadoCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoCliente");
                });

            modelBuilder.Entity("ProtelAppT.Data.Factibilidad", b =>
                {
                    b.HasOne("ProtelAppT.Data.Cliente", "Cliente")
                        .WithMany("Factibilidades")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProtelAppT.Data.EstadoFactibilidad", "EstadoFactibilidad")
                        .WithMany("Factibilidades")
                        .HasForeignKey("IdEstadoFactibilidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EstadoFactibilidad");
                });

            modelBuilder.Entity("ProtelAppT.Data.Usuario", b =>
                {
                    b.HasOne("ProtelAppT.Data.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("ProtelAppT.Data.Autorizacion", b =>
                {
                    b.Navigation("AsignacionesRolAutorizacion");
                });

            modelBuilder.Entity("ProtelAppT.Data.Cliente", b =>
                {
                    b.Navigation("Factibilidades");
                });

            modelBuilder.Entity("ProtelAppT.Data.EstadoCliente", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("ProtelAppT.Data.EstadoFactibilidad", b =>
                {
                    b.Navigation("Factibilidades");
                });

            modelBuilder.Entity("ProtelAppT.Data.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
